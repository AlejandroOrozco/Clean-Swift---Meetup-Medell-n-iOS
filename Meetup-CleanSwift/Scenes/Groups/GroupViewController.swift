//
//  GroupViewController.swift
//  Meetup-CleanSwift
//
//  Created by Alejandro Orozco Builes on 11/10/18.
//  Copyright (c) 2018 Alejandro Orozco Builes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GroupDisplayLogic: class
{
  func displayGroups(viewModel: [Group.SearchGroup.ViewModel])
  func displayGroupDetail()
  func displayMessage(message: String)
}

class GroupViewController: UIViewController, GroupDisplayLogic
{
  var interactor: GroupBusinessLogic?
  var router: (NSObjectProtocol & GroupRoutingLogic & GroupDataPassing)?

  // MARK: - Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: - Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = GroupInteractor()
    let presenter = GroupPresenter()
    let router = GroupRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: - Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: - View lifecycle

  override var preferredStatusBarStyle : UIStatusBarStyle {
    return .lightContent
  }

  override func viewDidLoad()
  {
    super.viewDidLoad()
    navigationController?.isNavigationBarHidden = true
    UIApplication.shared.statusBarView?.backgroundColor = #colorLiteral(red: 0.9607843137, green: 0.2509803922, blue: 0.3764705882, alpha: 1)
  }

  // MARK: - Search Group
  @IBOutlet weak var searchBar: UISearchBar!
  @IBOutlet weak var groupsTableView: UITableView!
  @IBOutlet weak var messageLabel: UILabel!

  var transitionImage: UIImageView?
  var transitionLabel: UILabel?
  var transitionContainerView: UIView?

  var groups: [Group.SearchGroup.ViewModel] = []
  
  func displayGroups(viewModel: [Group.SearchGroup.ViewModel]) {
    groups = viewModel
    showResults(show: true)
    groupsTableView.reloadData()
  }
  
  func displayGroupDetail() {
    performSegue(withIdentifier: "GroupDetail" , sender: self)
  }
  
  func displayMessage(message: String) {
    messageLabel.text = message
    showResults(show: false)
  }
  
  private func showResults(show: Bool) {
    groupsTableView.isHidden = !show
    messageLabel.isHidden = show
  }
}

extension GroupViewController: UISearchBarDelegate {
  func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
    if let groupName = searchBar.text {
        let groupRequest = Group.SearchGroup.Request(groupName: groupName)
        interactor?.searchGroup(search: groupRequest)
    }
  }

  func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
    searchBar.resignFirstResponder()
  }
}

extension GroupViewController: UITableViewDataSource, UITableViewDelegate {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return groups.count
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "GroupTableViewCell", for: indexPath) as!GroupTableViewCell
      cell.group = groups[indexPath.row]
    return cell
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    if let cell = tableView.cellForRow(at: indexPath) as? GroupTableViewCell {
      transitionImage = cell.groupImage
      transitionLabel = cell.groupName
      transitionContainerView = cell.salmonSquare
      interactor?.showGroup(group: cell.group)
    }
  }
}

extension GroupViewController: Scaling {
  func scalingUILabel(transition: ScaleTransitionDelegate) -> UILabel? {
    return transitionLabel
  }
  
  func scalingImageView(transition: ScaleTransitionDelegate) -> UIImageView? {
    return transitionImage
  }
  
  func scalingContainerView(transition: ScaleTransitionDelegate) -> UIView? {
    return transitionContainerView
  }
}
