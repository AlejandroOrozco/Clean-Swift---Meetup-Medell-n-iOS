//
//  GroupViewControllerTests.swift
//  Meetup-CleanSwift
//
//  Created by Alejandro Orozco Builes on 11/13/18.
//  Copyright (c) 2018 Alejandro Orozco Builes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Meetup_CleanSwift
import XCTest

class GroupViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: GroupViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupGroupViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupGroupViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Group", bundle: bundle)
    sut = (storyboard.instantiateViewController(withIdentifier: "GroupViewController") as! GroupViewController)
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class GroupBusinessLogicSpy: GroupBusinessLogic
  {
    var searchGroupVerification = false
    var showGroupVerification = false
    
    func searchGroup(search: Group.SearchGroup.Request) {
      searchGroupVerification = true
    }
    
    func showGroup(group: Group.SearchGroup.ViewModel?) {
      showGroupVerification = true
    }
  }
  
  class GroupRouterSpy: NSObject, GroupRoutingLogic, GroupDataPassing {

    var dataStore: GroupDataStore?
    var routeToGroupDetailVerification = false
    
    func routeToGroupDetail(segue: UIStoryboardSegue?) {
      routeToGroupDetailVerification = true
    }
  }
  
  // MARK: Tests
  
  func testShouldSearchGroup_WhenSearchBarTextDidEndEditing() {
    // Given
    let spy = GroupBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    sut.searchBar.text = "iOS"
    sut.searchBarTextDidEndEditing(sut.searchBar)
    sut.searchBarSearchButtonClicked(sut.searchBar)
    
    // Then
    XCTAssertTrue(spy.searchGroupVerification, "SearchBarTextDidEndEditing() should ask the interactor to do searchGroup()")
  }
  
  func testShouldDisplayGroups_WhenDisplayGroupsCalled() {
    // Given
    let viewModel = [GroupMock.viewModel]
    
    // When
    loadView()  
    sut.displayGroups(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(!sut.groups.isEmpty, "DisplayGroups() should fill groups and display the data")
  }
  
  func testShouldShowGroup_WhenTableDidSelectRowCalled() {
    // Given
    let spy = GroupBusinessLogicSpy()
    sut.interactor = spy

    let viewModel = [GroupMock.viewModel]
    
    // When
    loadView()
    sut.displayGroups(viewModel: viewModel)
    sut.tableView(sut.groupsTableView, didSelectRowAt: IndexPath(row: 0, section: 0))
    
    //Then
    XCTAssertTrue(spy.showGroupVerification, "didSelectRowAt() should ask the interactor to do showGroup()")
  }
  
  func testShouldDisplayMessage_WhenDisplayMessageCalled() {
    // Given
    let expectedMessage = "Meetup - iOS Medellín"
    
    // When
    loadView()
    sut.displayMessage(message: "Meetup - iOS Medellín")

    // Then
    XCTAssertEqual(expectedMessage, sut.messageLabel.text, "DisplayMessage() should display message on messageLabel")
  }
  
  func testShouldDisplayGroupDetail_WhenDisplayGroupDetailCalled() {
    // Given
    let groupRouterSpy = GroupRouterSpy()
    sut.router = groupRouterSpy

    if var dataStore = sut.interactor as? GroupDataStore {
      dataStore.group = GroupMock.viewModel
    }

    // When
    loadView()
    sut.displayGroupDetail()

    // Then
    XCTAssertTrue(groupRouterSpy.routeToGroupDetailVerification, "DisplayGroupDetail() should perform the segue and go to GroupDetail")
  }
}
